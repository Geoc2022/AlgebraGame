import Mathlib.Tactic

namespace MyAlgebra

class One (Œ± : Type) where
  /-- The element one -/
  one : Œ±

@[inherit_doc]
notation "(1)" => One.one

@[inherit_doc]
notation "e" => One.one


class Zero (Œ± : Type) where
  /-- The element zero -/
  zero : Œ±

@[inherit_doc]
notation "(0)" => Zero.zero

-- @[inherit_doc]
-- notation "ùü¨" => Zero.zero


class Magma (Œ± : Type) where
  /-- The binary operation that must be closed by definition -/
  mul : Œ± ‚Üí Œ± ‚Üí Œ±

@[inherit_doc]
infixl:70 " ‚¨ù "   => Magma.mul


class AddSemigroup (Œ± : Type) extends Add Œ± where
/-- Addition is associative -/
  add_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a + b + c = a + (b + c)

class Semigroup (Œ± : Type) extends Magma Œ± where
  /-- The operation is associative -/
  mul_assoc : ‚àÄ a b c : Œ±, a ‚¨ù b ‚¨ù c = a ‚¨ù (b ‚¨ù c)


class UnitalAddMagma (Œ± : Type) extends Zero Œ±, Add Œ± where
  /-- One is a left neutral element for the operation. -/
  zero_add : ‚àÄ a : Œ±, (0) + a = a
  /-- One is a right neutral element for the operation -/
  add_zero : ‚àÄ a : Œ±, a + (0) = a

class UnitalMagma (Œ± : Type) extends One Œ±, Magma Œ± where
  /-- One is a left neutral element for the operation. -/
  one_mul : ‚àÄ a : Œ±, e ‚¨ù a = a
  /-- One is a right neutral element for the operation -/
  mul_one : ‚àÄ a : Œ±, a ‚¨ù e = a


class AddMonoid (Œ± : Type) extends AddSemigroup Œ±, UnitalAddMagma Œ±

class Monoid (Œ± : Type) extends Semigroup Œ±, UnitalMagma Œ±


class Inv (Œ± : Type) where
  /-- The inversion function -/
  inv : Œ± ‚Üí Œ±

@[inherit_doc]
postfix:max "‚Åª¬π" => Inv.inv


class AddGroup (Œ± : Type) extends AddMonoid Œ±, Neg Œ± where
  neg_add : ‚àÄ a : Œ±, -a + a = (0)
  add_neg : ‚àÄ a : Œ±, a + -a = (0)


class Group (G : Type) extends Monoid G, Inv G where
  inv_mul : ‚àÄ a : G, a‚Åª¬π ‚¨ù a = e
  mul_inv : ‚àÄ a : G, a ‚¨ù a‚Åª¬π = e

export One (one)
export Magma (mul)
export Semigroup (mul_assoc)
export UnitalMagma (one_mul mul_one)
export Inv (inv)
export Group (inv_mul mul_inv)


class CommGroup (G : Type) extends Group G where
  mul_comm : ‚àÄ a b : G, a ‚¨ù b = b ‚¨ù a

export CommGroup (mul_comm)


def is_one (g : G) [Group G] := ‚àÄ a : G, g ‚¨ù a = a ‚àß a ‚¨ù g = a
def is_inv (a b : G) [Group G] := a ‚¨ù b = e ‚àß b ‚¨ù a = e


class Ring (R : Type) extends AddMonoid R, Monoid R where
  mul_add : ‚àÄ a b c : R, a ‚¨ù (b + c) = a ‚¨ù b + a ‚¨ù c
  add_mul : ‚àÄ a b c : R, (a + b) ‚¨ù c = a ‚¨ù c + b ‚¨ù c

export Zero (zero)
export UnitalAddMagma (zero_add add_zero)
export Ring (mul_add add_mul)



class CommRing (R : Type) extends Ring R where
  mul_comm : ‚àÄ a b : R, a ‚¨ù b = b ‚¨ù a

export CommRing (mul_comm)

def is_zero (g : R) [Ring R] := ‚àÄ a : R, g ‚¨ù a = (0) ‚àß a ‚¨ù g = (0)
def is_neg (a b : R) [Ring R] := a + b = (0) ‚àß b + a = (0)

-- variable (R : Type) [Ring R]

-- #check ((0) : R) + ((0) : R) = (1)

-- theorem mul_zero [Ring R] (a : R) : a ‚¨ù (0) = (0) := by
--   have h1 : (1) + (0) = (1) := add_zero ((1) : R)
--   have h2 : a ‚¨ù ((1) + (0)) = a ‚¨ù (1) := by rw [h1]
--   calc
